# =======================
# Shiro INI configuration
# =======================

[main]
# Objects and their properties are defined here,
# Such as the securityManager, Realms and anything
# else needed to build the SecurityManager
jdbcRealm=org.apache.shiro.realm.jdbc.JdbcRealm

# Authentication Query
jdbcRealm.authenticationQuery = select contrase√±a from Usuario where correo = ?
# If not filled, subclasses of JdbcRealm assume "select role_name from user_roles where username = ?"
jdbcRealm.userRolesQuery = select rol from Usuario where correo = ?

# Database Configuration
dataSource = org.postgresql.ds.PGPoolingDataSource
dataSource.serverName = ec2-54-209-187-69.compute-1.amazonaws.com
dataSource.databaseName = d58vgjn7ghq968
dataSource.ssl = true
dataSource.sslfactory = org.postgresql.ssl.NonValidatingFactory
dataSource.portNumber = 5432
dataSource.user = wgqwcdylrkrnap
dataSource.password = 0b6598273240c47460cc8c99ab11dea7ed621d49354531028091770dc975db9d
jdbcRealm.dataSource = $dataSource

# Important URLs
authc.loginUrl = /login.xhtml
roles.unauthorizedUrl = /unauthorized.xhtml

# Password Matcher
passwordMatcher = org.apache.shiro.authc.credential.PasswordMatcher
credentialsMatcher = org.apache.shiro.authc.credential.HashedCredentialsMatcher
credentialsMatcher.hashAlgorithmName = SHA-256
credentialsMatcher.hashIterations=1
credentialsMatcher.storedCredentialsHexEncoded = true

# Login filter

[users]
# The 'users' section is for simple deployments
# when you only need a small number of statically-defined
# set of User accounts.

[roles]
# The 'roles' section is for simple deployments
# when you only need a small number of statically-defined
# roles.

[urls]
# The 'urls' section is used for url-based security
# in web applications.  We'll discuss this section in the
# Web documentation
/index = ssl[443], authcBasic